{"version":3,"sources":["Header.js","Footer.js","Note.js","NotesList.js","NoteForm.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","href","Footer","style","backgroundColor","Note","id","initialTitle","initialText","removeNote","updateNote","useState","setTitle","text","setText","editable","setEditable","border","fontSize","marginBottom","spellCheck","disabled","value","onChange","e","target","rows","hidden","onClick","NotesList","notes","map","note","_id","NoteForm","addNote","onSubmit","preventDefault","htmlFor","type","App","setNotes","useEffect","axios","get","then","res","data","post","newNotes","delete","filter","updatedNote","put","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.381c95e1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ({ title }) => {\r\n  return (\r\n    <nav className=\"justify-content-center navbar navbar-expand-lg p-3 mb-4 bg-primary  text-white font-weight-bold\">\r\n      <span className=\"navbar-brand \" href=\"/\"><h3>{title}</h3></span>\r\n    </nav>\r\n  );\r\n};\r\n\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div style={{ backgroundColor: '#0275d8' }}>\r\n    <div className=\"text-center mb-3  \">\r\n    <hr />\r\n      <h4 className=\"text-white\">Hello React</h4>\r\n      <a href=\"https://github.com/SebastianHurtado12/hello-react-hurtado1\">\r\n        <i className=\"fa fa-github fa-4x text-dark\"></i>\r\n      </a>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { useState } from 'react';\r\n\r\nconst Note = ({ id, initialTitle, initialText, removeNote, updateNote }) => {\r\n\r\n  // note title state\r\n  const [title, setTitle] = useState(initialTitle);\r\n  // note text state\r\n  const [text, setText] = useState(initialText);\r\n  // editable state\r\n  const [editable, setEditable] = useState(false);\r\n\r\n  // handlers\r\n  // save handler\r\n  const handleSave = () => {\r\n    updateNote(id, title, text);\r\n    setEditable(!editable);\r\n  };\r\n\r\n  // CSS override de bootstrap\r\n  const inputStyle = {\r\n    backgroundColor: 'transparent',\r\n    border: 'none',\r\n    fontSize: 1.25+'rem',\r\n    marginBottom: 0.75+'rem'\r\n  };\r\n  const textareaStyle = {\r\n    backgroundColor: 'transparent',\r\n    border: 'none'\r\n  };\r\n\r\n  // render JSX\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n\r\n        <input\r\n          style={inputStyle}\r\n          spellCheck={false}\r\n          disabled={!editable}\r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n\r\n        <textarea\r\n          rows={5}\r\n          style={textareaStyle}\r\n          spellCheck={false}\r\n          disabled={!editable}\r\n          value={text}\r\n          onChange={(e) => setText(e.target.value)}\r\n        >\r\n        </textarea>\r\n        <br />\r\n\r\n        <button className=\"btn\" hidden={editable} onClick={() => setEditable(!editable)}>\r\n          <i className=\"text-secondary fa fa-pencil fa-lg\"></i>\r\n        </button>\r\n\r\n        <button className=\"btn\" hidden={!editable} onClick={handleSave}>\r\n          <i className=\"text-dark fa fa-save fa-lg\"></i>\r\n        </button>\r\n\r\n        <button className=\"btn\" onClick={() => removeNote(id)}>\r\n          <i className=\"text-danger fa fa-trash fa-lg\"></i>\r\n        </button>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from 'react';\r\nimport Note from './Note';\r\n\r\nconst NotesList = ({ notes, removeNote, updateNote }) => {\r\n\r\n  \r\n  return (\r\n    <div className=\"card-columns\">\r\n      {notes.map((note) => (\r\n        <Note\r\n          id={note._id}\r\n          key={note._id}\r\n          initialTitle={note.title}\r\n          initialText={note.text}\r\n          removeNote={removeNote}\r\n          updateNote={updateNote}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotesList;\r\n","import React, { useState } from 'react';\r\n\r\nconst NoteForm = ({ addNote }) => {\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [text, setText] = useState('');\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    addNote({\r\n      title: title,\r\n      text: text\r\n    });\r\n    setTitle('');\r\n    setText('');\r\n  };\r\n\r\n  return (\r\n     \r\n    <form onSubmit={handleSubmit}>\r\n\r\n      <div className=\"form-group  font-weight-bold\">\r\n        <label htmlFor=\"title\">TITULO</label>\r\n        <input\r\n\r\n          id=\"title\"\r\n          className=\"form-control\"\r\n          type='text'\r\n          value={title}\r\n          onChange={e => setTitle(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-group font-weight-bold\">\r\n        <label htmlFor=\"text\" >TEXTO</label>\r\n        <textarea\r\n          id=\"text\"\r\n          className=\"form-control\"\r\n          value={text}\r\n          rows=\"4\"\r\n          onChange={e => setText(e.target.value)}\r\n        >\r\n        </textarea>\r\n      </div>\r\n      <div className=\"text-center mb-3\">\r\n        <input\r\n          className=\"btn  btn btn-primary  btn-lg font-weight-bold\"\r\n          type=\"submit\"\r\n          value= \"GUARDAR\"\r\n          />\r\n      </div>\r\n    </form>\r\n\r\n  );\r\n};\r\n\r\nexport default NoteForm;\r\n","import React, { useState, useEffect } from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\nimport axios from 'axios';\nimport NotesList from './NotesList';\nimport NoteForm from './NoteForm';\n\nconst App = () => {\n\n  const [notes, setNotes] = useState([]);\n\n  useEffect(() => {\n   axios.get('/api/notes')\n     .then(res => {\n       setNotes(res.data.notes);\n     });\n   }, []);\n\n  const addNote = note => {\n    axios.post('/api/notes', note)\n      .then(res => {\n        const newNotes = [res.data, ...notes];\n        setNotes(newNotes);\n      });\n  };\n\n  // update note\n  const updateNote = (id, title, text) => {\n    const updatedNote = {\n      title: title,\n      text: text\n    };\n    axios.put('/api/notes/' + id, updatedNote)\n      .then(res => {\n        const newNotes = notes.map(note =>\n          note.id === id ? updatedNote : note\n        );\n        setNotes(newNotes);\n      });\n  };\n\n  // delete note\n  const removeNote = (id) => {\n    axios.delete('/api/notes/' + id)\n      .then(res => {\n        const newNotes = notes.filter(note => note._id !== id);\n        setNotes(newNotes);\n    });\n  };\n\n  return (\n    <div>\n      <Header title='MisNotas'/>\n      <div className=\"container mt-3\">\n      <NoteForm\n          addNote={addNote}\n       />\n      <hr />\n        <NotesList\n          notes={notes}\n          removeNote={removeNote}\n          updateNote={updateNote}\n        />\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}